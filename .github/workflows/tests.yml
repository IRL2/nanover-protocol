on: [push]
name: "Tests and validation"

jobs:
  build-conda:
    name: Build conda packages
    runs-on: ubuntu-latest
    defaults:
      run:
        # This is necessary for the conda action. It replaces `conda init` as
        # the shell does not load ,profile or .bashrc.
        shell: bash -el {0}
    env:
      build_command: "conda-build --prefix-length=100 --no-test --no-anaconda-upload "
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # We need all the history to figure out the version number
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          miniforge-version: latest
      - name: Set environment variables
        run: |
          echo NARUPA_BUILD_VERSION="0.1.$(git rev-list --count HEAD)" >> "$GITHUB_ENV"
          echo NARUPA_LICENSE_PATH="$(readlink -f LICENSE)" >> "$GITHUB_ENV"
          echo MIN_PYTHON_VERSION=3.10 >> "$GITHUB_ENV"
      - name: Test that the repo is sane and does not contain superfluous __init__ file
        run: bash ./maintainers/check_extra_init_files.sh
      - name: Install dependencies
        run: conda install python conda-build grpcio-tools conda-verify
      - name: Compiling the prototypes
        run: python python-libraries/narupa-core/setup.py compile_proto --proto-dir=protocol
      - name: Building the Conda packages
        run: |
          $build_command \
            python-libraries/narupa-essd/conda \
            python-libraries/narupa-core/conda \
            python-libraries/narupa-openmm/conda \
            python-libraries/narupa-ase/conda \
            python-libraries/narupa-mdanalysis/conda \
            python-libraries/narupa-lammps/conda \
            python-libraries/narupa-server/conda
      - run: |
          mkdir artifacts
          cp -r ${CONDA_PREFIX}/conda-bld ./artifacts
          ls ./artifacts
      - name: Save the artifacts
        uses: actions/upload-artifact@v3
        with:
          name: conda-packages
          path: ./artifacts
  test-conda:
    name: Python tests on the conda packages
    runs-on: ubuntu-latest
    needs: build-conda
    defaults:
      run:
        # This is necessary for the conda action. It replaces `conda init` as
        # the shell does not load ,profile or .bashrc.
        shell: bash -el {0}
    steps:
      - uses: actions/checkout@v3
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          miniforge-version: latest
      - name: Retrieve conda packages
        uses: actions/download-artifact@v3
        with:
          name: conda-packages
      - run: ls -a ./ ./conda-bld
      - name: Install Narupa
        run: conda install -c conda-forge -c ./conda-bld mpi4py narupa-server narupa-lammps
      - name: Install tests dependancies
        run: python -m pip install -r python-libraries/requirements.test
      - name: Parallel tests
        run: python -m pytest --cov narupa python-libraries -n auto -m 'not serial'
      - name: Serial tests
        run: python -m pytest --cov narupa python-libraries -n auto -m 'serial'
  publish-conda:
    name: Publish the conda packages on Anaconda cloud
    runs-on: ubuntu-latest
    needs: test-conda
    defaults:
      run:
        # This is necessary for the conda action. It replaces `conda init` as
        # the shell does not load ,profile or .bashrc.
        shell: bash -el {0}
    if: github.ref == 'refs/heads/build-conda'
    steps:
      - uses: actions/checkout@v3
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          # WARNING! On the contrary to all the other places where we install
          # conda, we install miniconda and NOT miniforge!
          # This is because we do not need packages to RUN narupa, but packages
          # from the default (anaconda) channel to upload to anaconda.
          miniconda-version: latest
      - name: Retrieve conda packages
        uses: actions/download-artifact@v3
        with:
          name: conda-packages
      - name: Install Anaconda
        run: conda install anaconda-client
      - name: Connect to Anaconda cloud
        # The login token may be used by a failed build already. If we are asked
        # if we want it back, we say yes. Hence the echo Y.
        run: echo Y | anaconda login --username irl_bot --password ${{ secrets.ANACONDA_PASSWORD }}
      - name: Upload packages
        # Anaconda will complain if the given version of a package is already
        # there. Until we have some versioning, we force the upload.
        run: anaconda  upload --user irl conda-bld/noarch/narupa-*.tar.bz2 --force
      - name: Disconnect from Anaconda cloud
        #  Do not fail the build if we cannot logout.
        run: anaconda logout || echo "Could not logout. Too bad."
  python-tests:
    name: Python unit and integration tests
    runs-on: ubuntu-latest
    defaults:
      run:
        # This is necessary for the conda action. It replaces `conda init` as
        # the shell does not load ,profile or .bashrc.
        shell: bash -el {0}
    steps:
      - uses: actions/checkout@v3
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          miniforge-version: latest
      - name: Install narupa dependancies
        run: conda install mpi4py openmm
      - name: Install tests dependancies
        run: python -m pip install -r python-libraries/requirements.test
      - name: Compile
        run: ./compile.sh --no-dotnet
      - name: Parallel tests
        run: python -m pytest --cov narupa python-libraries -n auto -m 'not serial'
      - name: Serial tests
        run: python -m pytest --cov narupa python-libraries -n auto -m 'serial'
  mypy:
    name: Type analysis for python
    runs-on: ubuntu-latest
    defaults:
      run:
        # This is necessary for the conda action. It replaces `conda init` as
        # the shell does not load ,profile or .bashrc.
        shell: bash -el {0}
    steps:
      - uses: actions/checkout@v3
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          miniforge-version: latest
      - name: Install narupa dependancies
        run: conda install mpi4py openmm
      - name: Install tests dependancies
        run: python -m pip install -r python-libraries/requirements.test
      - name: Compile
        run: ./compile.sh --no-dotnet
      - name: mypy
        run: |
          # Mypy accepts paths, modules or packages as inputs. However, only
          # packages work reasonably well with packages. So we need to generate
          # a list of the packages we want to test.
          packages=$(find python-libraries -name __init__.py \
            | sed 's/__init__.py//g' \
            | awk '{split($0, a, /src/); print(a[2])}' \
            | sed 's#/#.#g' \
            | cut -c 2- \
            | sed 's/\.$//g' \
            | grep -v '^$' \
            | grep -v protocol \
            | sed 's/^/-p /g' \
            | grep -v '\..*\.' \
            | tr '\n' ' ')
          mypy --ignore-missing-imports --namespace-packages --check-untyped-defs --allow-redefinition $packages
  ruff:
    name: Ruff to lint python code
    runs-on: ubuntu-latest
    defaults:
      run:
        # This is necessary for the conda action. It replaces `conda init` as
        # the shell does not load ,profile or .bashrc.
        shell: bash -el {0}
    steps:
      - uses: actions/checkout@v3
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          miniforge-version: latest
      - name: Install narupa dependancies
        run: conda install mpi4py openmm
      - name: Install ruff
        run: python -m pip install ruff black
      - name: Compile
        run: ./compile.sh --no-dotnet
      - name: Ruff
        run: ruff ./python-libraries
      - name: Black
        run: black --diff --check ./python-libraries
  csharp-tests:
    name: C# unit and integration tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '2.1.x'
      - name: Compile
        run: ./compile.sh --no-python
      - name: Tests
        run: cd ./csharp-libraries && dotnet test
