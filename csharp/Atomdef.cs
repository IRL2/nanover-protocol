// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: atomdef.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Narupa.Protocol.Topology {

  /// <summary>Holder for reflection information generated from atomdef.proto</summary>
  public static partial class AtomdefReflection {

    #region Descriptor
    /// <summary>File descriptor for atomdef.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AtomdefReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1hdG9tZGVmLnByb3RvEg9uYXJ1cGEudG9wb2xvZ3kiRgoHQXRvbURlZhIS",
            "CgphdG9tX2luZGV4GAEgASgNEhQKDGF0b21fZWxlbWVudBgCIAEoDRIRCglh",
            "dG9tX25hbWUYAyABKAlCG6oCGE5hcnVwYS5Qcm90b2NvbC5Ub3BvbG9neWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Narupa.Protocol.Topology.AtomDef), global::Narupa.Protocol.Topology.AtomDef.Parser, new[]{ "AtomIndex", "AtomElement", "AtomName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AtomDef : pb::IMessage<AtomDef> {
    private static readonly pb::MessageParser<AtomDef> _parser = new pb::MessageParser<AtomDef>(() => new AtomDef());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AtomDef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Narupa.Protocol.Topology.AtomdefReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AtomDef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AtomDef(AtomDef other) : this() {
      atomIndex_ = other.atomIndex_;
      atomElement_ = other.atomElement_;
      atomName_ = other.atomName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AtomDef Clone() {
      return new AtomDef(this);
    }

    /// <summary>Field number for the "atom_index" field.</summary>
    public const int AtomIndexFieldNumber = 1;
    private uint atomIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtomIndex {
      get { return atomIndex_; }
      set {
        atomIndex_ = value;
      }
    }

    /// <summary>Field number for the "atom_element" field.</summary>
    public const int AtomElementFieldNumber = 2;
    private uint atomElement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtomElement {
      get { return atomElement_; }
      set {
        atomElement_ = value;
      }
    }

    /// <summary>Field number for the "atom_name" field.</summary>
    public const int AtomNameFieldNumber = 3;
    private string atomName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AtomName {
      get { return atomName_; }
      set {
        atomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AtomDef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AtomDef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AtomIndex != other.AtomIndex) return false;
      if (AtomElement != other.AtomElement) return false;
      if (AtomName != other.AtomName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AtomIndex != 0) hash ^= AtomIndex.GetHashCode();
      if (AtomElement != 0) hash ^= AtomElement.GetHashCode();
      if (AtomName.Length != 0) hash ^= AtomName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AtomIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AtomIndex);
      }
      if (AtomElement != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AtomElement);
      }
      if (AtomName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AtomName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AtomIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AtomIndex);
      }
      if (AtomElement != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AtomElement);
      }
      if (AtomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AtomName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AtomDef other) {
      if (other == null) {
        return;
      }
      if (other.AtomIndex != 0) {
        AtomIndex = other.AtomIndex;
      }
      if (other.AtomElement != 0) {
        AtomElement = other.AtomElement;
      }
      if (other.AtomName.Length != 0) {
        AtomName = other.AtomName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AtomIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            AtomElement = input.ReadUInt32();
            break;
          }
          case 26: {
            AtomName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
