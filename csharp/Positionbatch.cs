// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: positionbatch.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Narupa.Protocol.Frame {

  /// <summary>Holder for reflection information generated from positionbatch.proto</summary>
  public static partial class PositionbatchReflection {

    #region Descriptor
    /// <summary>File descriptor for positionbatch.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PositionbatchReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNwb3NpdGlvbmJhdGNoLnByb3RvEgxuYXJ1cGEuZnJhbWUaEm1hdGgvdmVj",
            "dG9yMy5wcm90byJgChFBdG9tUG9zaXRpb25CYXRjaBINCgVmcmFtZRgBIAEo",
            "DRITCgtzdGFydF9pbmRleBgCIAEoDRInCglwb3NpdGlvbnMYAyADKAsyFC5u",
            "YXJ1cGEubWF0aC5WZWN0b3IzQhiqAhVOYXJ1cGEuUHJvdG9jb2wuRnJhbWVi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Narupa.Protocol.Math.Vector3Reflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Narupa.Protocol.Frame.AtomPositionBatch), global::Narupa.Protocol.Frame.AtomPositionBatch.Parser, new[]{ "Frame", "StartIndex", "Positions" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AtomPositionBatch : pb::IMessage<AtomPositionBatch> {
    private static readonly pb::MessageParser<AtomPositionBatch> _parser = new pb::MessageParser<AtomPositionBatch>(() => new AtomPositionBatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AtomPositionBatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Narupa.Protocol.Frame.PositionbatchReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AtomPositionBatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AtomPositionBatch(AtomPositionBatch other) : this() {
      frame_ = other.frame_;
      startIndex_ = other.startIndex_;
      positions_ = other.positions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AtomPositionBatch Clone() {
      return new AtomPositionBatch(this);
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private uint frame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Frame {
      get { return frame_; }
      set {
        frame_ = value;
      }
    }

    /// <summary>Field number for the "start_index" field.</summary>
    public const int StartIndexFieldNumber = 2;
    private uint startIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartIndex {
      get { return startIndex_; }
      set {
        startIndex_ = value;
      }
    }

    /// <summary>Field number for the "positions" field.</summary>
    public const int PositionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Narupa.Protocol.Math.Vector3> _repeated_positions_codec
        = pb::FieldCodec.ForMessage(26, global::Narupa.Protocol.Math.Vector3.Parser);
    private readonly pbc::RepeatedField<global::Narupa.Protocol.Math.Vector3> positions_ = new pbc::RepeatedField<global::Narupa.Protocol.Math.Vector3>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Narupa.Protocol.Math.Vector3> Positions {
      get { return positions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AtomPositionBatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AtomPositionBatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Frame != other.Frame) return false;
      if (StartIndex != other.StartIndex) return false;
      if(!positions_.Equals(other.positions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frame != 0) hash ^= Frame.GetHashCode();
      if (StartIndex != 0) hash ^= StartIndex.GetHashCode();
      hash ^= positions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frame != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Frame);
      }
      if (StartIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StartIndex);
      }
      positions_.WriteTo(output, _repeated_positions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Frame);
      }
      if (StartIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartIndex);
      }
      size += positions_.CalculateSize(_repeated_positions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AtomPositionBatch other) {
      if (other == null) {
        return;
      }
      if (other.Frame != 0) {
        Frame = other.Frame;
      }
      if (other.StartIndex != 0) {
        StartIndex = other.StartIndex;
      }
      positions_.Add(other.positions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Frame = input.ReadUInt32();
            break;
          }
          case 16: {
            StartIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            positions_.AddEntriesFrom(input, _repeated_positions_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
