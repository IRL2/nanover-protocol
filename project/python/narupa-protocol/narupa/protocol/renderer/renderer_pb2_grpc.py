# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from narupa.protocol.renderer import renderer_pb2 as narupa_dot_protocol_dot_renderer_dot_renderer__pb2


class RendererProviderStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RunGraphicsBenchmark = channel.unary_unary(
        '/narupa.protocol.renderer.RendererProvider/RunGraphicsBenchmark',
        request_serializer=narupa_dot_protocol_dot_renderer_dot_renderer__pb2.RunGraphicsBenchmarkRequest.SerializeToString,
        response_deserializer=narupa_dot_protocol_dot_renderer_dot_renderer__pb2.RunGraphicsBenchmarkResponse.FromString,
        )


class RendererProviderServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def RunGraphicsBenchmark(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RendererProviderServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RunGraphicsBenchmark': grpc.unary_unary_rpc_method_handler(
          servicer.RunGraphicsBenchmark,
          request_deserializer=narupa_dot_protocol_dot_renderer_dot_renderer__pb2.RunGraphicsBenchmarkRequest.FromString,
          response_serializer=narupa_dot_protocol_dot_renderer_dot_renderer__pb2.RunGraphicsBenchmarkResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'narupa.protocol.renderer.RendererProvider', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
