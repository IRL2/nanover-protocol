// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: narupa/protocol/multiplayer/multiplayer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Narupa.Multiplayer {

  /// <summary>Holder for reflection information generated from narupa/protocol/multiplayer/multiplayer.proto</summary>
  public static partial class MultiplayerReflection {

    #region Descriptor
    /// <summary>File descriptor for narupa/protocol/multiplayer/multiplayer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MultiplayerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1uYXJ1cGEvcHJvdG9jb2wvbXVsdGlwbGF5ZXIvbXVsdGlwbGF5ZXIucHJv",
            "dG8SEm5hcnVwYS5tdWx0aXBsYXllchocZ29vZ2xlL3Byb3RvYnVmL3N0cnVj",
            "dC5wcm90byJDCg9BdmF0YXJDb21wb25lbnQSDAoEbmFtZRgBIAEoCRIQCghw",
            "b3NpdGlvbhgCIAMoAhIQCghyb3RhdGlvbhgDIAMoAiJSCgZBdmF0YXISEAoI",
            "cGxheWVySUQYASABKAUSNgoJY29tcG9uZW50GAIgAygLMiMubmFydXBhLm11",
            "bHRpcGxheWVyLkF2YXRhckNvbXBvbmVudCItChlTdWJzY3JpYmVUb0F2YXRh",
            "cnNSZXF1ZXN0EhAKCHBsYXllcklEGAEgASgFIhQKElB1Ymxpc2hBdmF0YXJS",
            "ZXBseSIWChRTY2VuZVByb3BlcnR5UmVxdWVzdCJuChdTZXRTY2VuZVByb3Bl",
            "cnR5UmVxdWVzdBIaChJwcm9wZXJ0eV9sb2NrX2d1aWQYASABKA0SNwoKcHJv",
            "cGVydGllcxgCIAEoCzIjLm5hcnVwYS5tdWx0aXBsYXllci5TY2VuZVByb3Bl",
            "cnRpZXMiGAoWSm9pbk11bHRpcGxheWVyUmVxdWVzdCIrChdKb2luTXVsdGlw",
            "bGF5ZXJSZXNwb25zZRIQCghwbGF5ZXJJRBgBIAEoBSIxChFMb2NrU2NlbmVQ",
            "cm9wZXJ0eRIOCgZsb2NrZWQYASABKAgSDAoEZ3VpZBgCIAEoDSJGChJTY2Vu",
            "ZVByb3BlcnR5UmVwbHkSFAoMcHJvcGVydHlfc2V0GAEgASgIEhoKEnByb3Bl",
            "cnR5X2xvY2tfZ3VpZBgCIAEoDSLYAQoPU2NlbmVQcm9wZXJ0aWVzEhAKCHBv",
            "c2l0aW9uGAEgAygCEhAKCHJvdGF0aW9uGAIgAygCEg0KBXNjYWxlGAMgASgC",
            "EkcKCmFkZGl0aW9uYWwYBCADKAsyMy5uYXJ1cGEubXVsdGlwbGF5ZXIuU2Nl",
            "bmVQcm9wZXJ0aWVzLkFkZGl0aW9uYWxFbnRyeRpJCg9BZGRpdGlvbmFsRW50",
            "cnkSCwoDa2V5GAEgASgJEiUKBXZhbHVlGAIgASgLMhYuZ29vZ2xlLnByb3Rv",
            "YnVmLlZhbHVlOgI4ATLUBQoLTXVsdGlwbGF5ZXISYwoSU3Vic2NyaWJlVG9B",
            "dmF0YXJzEi0ubmFydXBhLm11bHRpcGxheWVyLlN1YnNjcmliZVRvQXZhdGFy",
            "c1JlcXVlc3QaGi5uYXJ1cGEubXVsdGlwbGF5ZXIuQXZhdGFyIgAwARJXCg1Q",
            "dWJsaXNoQXZhdGFyEhoubmFydXBhLm11bHRpcGxheWVyLkF2YXRhchomLm5h",
            "cnVwYS5tdWx0aXBsYXllci5QdWJsaXNoQXZhdGFyUmVwbHkiACgBEm8KGlN1",
            "YnNjcmliZVRvU2NlbmVQcm9wZXJ0aWVzEigubmFydXBhLm11bHRpcGxheWVy",
            "LlNjZW5lUHJvcGVydHlSZXF1ZXN0GiMubmFydXBhLm11bHRpcGxheWVyLlNj",
            "ZW5lUHJvcGVydGllcyIAMAESXgoMU2V0TG9ja1NjZW5lEiUubmFydXBhLm11",
            "bHRpcGxheWVyLkxvY2tTY2VuZVByb3BlcnR5GiUubmFydXBhLm11bHRpcGxh",
            "eWVyLkxvY2tTY2VuZVByb3BlcnR5IgASXQoLVW5sb2NrU2NlbmUSJS5uYXJ1",
            "cGEubXVsdGlwbGF5ZXIuTG9ja1NjZW5lUHJvcGVydHkaJS5uYXJ1cGEubXVs",
            "dGlwbGF5ZXIuTG9ja1NjZW5lUHJvcGVydHkiABJpChBTZXRTY2VuZVByb3Bl",
            "cnR5EisubmFydXBhLm11bHRpcGxheWVyLlNldFNjZW5lUHJvcGVydHlSZXF1",
            "ZXN0GiYubmFydXBhLm11bHRpcGxheWVyLlNjZW5lUHJvcGVydHlSZXBseSIA",
            "EmwKD0pvaW5NdWx0aXBsYXllchIqLm5hcnVwYS5tdWx0aXBsYXllci5Kb2lu",
            "TXVsdGlwbGF5ZXJSZXF1ZXN0GisubmFydXBhLm11bHRpcGxheWVyLkpvaW5N",
            "dWx0aXBsYXllclJlc3BvbnNlIgBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Narupa.Multiplayer.AvatarComponent), global::Narupa.Multiplayer.AvatarComponent.Parser, new[]{ "Name", "Position", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Narupa.Multiplayer.Avatar), global::Narupa.Multiplayer.Avatar.Parser, new[]{ "PlayerID", "Component" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Narupa.Multiplayer.SubscribeToAvatarsRequest), global::Narupa.Multiplayer.SubscribeToAvatarsRequest.Parser, new[]{ "PlayerID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Narupa.Multiplayer.PublishAvatarReply), global::Narupa.Multiplayer.PublishAvatarReply.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Narupa.Multiplayer.ScenePropertyRequest), global::Narupa.Multiplayer.ScenePropertyRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Narupa.Multiplayer.SetScenePropertyRequest), global::Narupa.Multiplayer.SetScenePropertyRequest.Parser, new[]{ "PropertyLockGuid", "Properties" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Narupa.Multiplayer.JoinMultiplayerRequest), global::Narupa.Multiplayer.JoinMultiplayerRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Narupa.Multiplayer.JoinMultiplayerResponse), global::Narupa.Multiplayer.JoinMultiplayerResponse.Parser, new[]{ "PlayerID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Narupa.Multiplayer.LockSceneProperty), global::Narupa.Multiplayer.LockSceneProperty.Parser, new[]{ "Locked", "Guid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Narupa.Multiplayer.ScenePropertyReply), global::Narupa.Multiplayer.ScenePropertyReply.Parser, new[]{ "PropertySet", "PropertyLockGuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Narupa.Multiplayer.SceneProperties), global::Narupa.Multiplayer.SceneProperties.Parser, new[]{ "Position", "Rotation", "Scale", "Additional" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Represents an avatar component: e.g. an HMD, controller or glove.
  /// </summary>
  public sealed partial class AvatarComponent : pb::IMessage<AvatarComponent> {
    private static readonly pb::MessageParser<AvatarComponent> _parser = new pb::MessageParser<AvatarComponent>(() => new AvatarComponent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AvatarComponent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Narupa.Multiplayer.MultiplayerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvatarComponent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvatarComponent(AvatarComponent other) : this() {
      name_ = other.name_;
      position_ = other.position_.Clone();
      rotation_ = other.rotation_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AvatarComponent Clone() {
      return new AvatarComponent(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_position_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> position_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Position {
      get { return position_; }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_rotation_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> rotation_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Rotation {
      get { return rotation_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AvatarComponent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AvatarComponent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!position_.Equals(other.position_)) return false;
      if(!rotation_.Equals(other.rotation_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= position_.GetHashCode();
      hash ^= rotation_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      position_.WriteTo(output, _repeated_position_codec);
      rotation_.WriteTo(output, _repeated_rotation_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += position_.CalculateSize(_repeated_position_codec);
      size += rotation_.CalculateSize(_repeated_rotation_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AvatarComponent other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      position_.Add(other.position_);
      rotation_.Add(other.rotation_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18:
          case 21: {
            position_.AddEntriesFrom(input, _repeated_position_codec);
            break;
          }
          case 26:
          case 29: {
            rotation_.AddEntriesFrom(input, _repeated_rotation_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents an avatar, a set of components.
  /// </summary>
  public sealed partial class Avatar : pb::IMessage<Avatar> {
    private static readonly pb::MessageParser<Avatar> _parser = new pb::MessageParser<Avatar>(() => new Avatar());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Avatar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Narupa.Multiplayer.MultiplayerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avatar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avatar(Avatar other) : this() {
      playerID_ = other.playerID_;
      component_ = other.component_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avatar Clone() {
      return new Avatar(this);
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private int playerID_;
    /// <summary>
    /// Player ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerID {
      get { return playerID_; }
      set {
        playerID_ = value;
      }
    }

    /// <summary>Field number for the "component" field.</summary>
    public const int ComponentFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Narupa.Multiplayer.AvatarComponent> _repeated_component_codec
        = pb::FieldCodec.ForMessage(18, global::Narupa.Multiplayer.AvatarComponent.Parser);
    private readonly pbc::RepeatedField<global::Narupa.Multiplayer.AvatarComponent> component_ = new pbc::RepeatedField<global::Narupa.Multiplayer.AvatarComponent>();
    /// <summary>
    /// List of avatar components.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Narupa.Multiplayer.AvatarComponent> Component {
      get { return component_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Avatar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Avatar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if(!component_.Equals(other.component_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
      hash ^= component_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerID);
      }
      component_.WriteTo(output, _repeated_component_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
      }
      size += component_.CalculateSize(_repeated_component_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Avatar other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID != 0) {
        PlayerID = other.PlayerID;
      }
      component_.Add(other.component_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerID = input.ReadInt32();
            break;
          }
          case 18: {
            component_.AddEntriesFrom(input, _repeated_component_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a request to join the avatars stream.
  /// </summary>
  public sealed partial class SubscribeToAvatarsRequest : pb::IMessage<SubscribeToAvatarsRequest> {
    private static readonly pb::MessageParser<SubscribeToAvatarsRequest> _parser = new pb::MessageParser<SubscribeToAvatarsRequest>(() => new SubscribeToAvatarsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeToAvatarsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Narupa.Multiplayer.MultiplayerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToAvatarsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToAvatarsRequest(SubscribeToAvatarsRequest other) : this() {
      playerID_ = other.playerID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToAvatarsRequest Clone() {
      return new SubscribeToAvatarsRequest(this);
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private int playerID_;
    /// <summary>
    /// Player ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerID {
      get { return playerID_; }
      set {
        playerID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeToAvatarsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeToAvatarsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeToAvatarsRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID != 0) {
        PlayerID = other.PlayerID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a reply at the termination of the avatar publish stream.
  /// </summary>
  public sealed partial class PublishAvatarReply : pb::IMessage<PublishAvatarReply> {
    private static readonly pb::MessageParser<PublishAvatarReply> _parser = new pb::MessageParser<PublishAvatarReply>(() => new PublishAvatarReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublishAvatarReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Narupa.Multiplayer.MultiplayerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishAvatarReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishAvatarReply(PublishAvatarReply other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublishAvatarReply Clone() {
      return new PublishAvatarReply(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublishAvatarReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublishAvatarReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublishAvatarReply other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Represents a request to join scene properties. 
  /// </summary>
  public sealed partial class ScenePropertyRequest : pb::IMessage<ScenePropertyRequest> {
    private static readonly pb::MessageParser<ScenePropertyRequest> _parser = new pb::MessageParser<ScenePropertyRequest>(() => new ScenePropertyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenePropertyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Narupa.Multiplayer.MultiplayerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePropertyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePropertyRequest(ScenePropertyRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePropertyRequest Clone() {
      return new ScenePropertyRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenePropertyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenePropertyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenePropertyRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Represents a request to set scene properties
  /// </summary>
  public sealed partial class SetScenePropertyRequest : pb::IMessage<SetScenePropertyRequest> {
    private static readonly pb::MessageParser<SetScenePropertyRequest> _parser = new pb::MessageParser<SetScenePropertyRequest>(() => new SetScenePropertyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetScenePropertyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Narupa.Multiplayer.MultiplayerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetScenePropertyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetScenePropertyRequest(SetScenePropertyRequest other) : this() {
      propertyLockGuid_ = other.propertyLockGuid_;
      properties_ = other.properties_ != null ? other.properties_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetScenePropertyRequest Clone() {
      return new SetScenePropertyRequest(this);
    }

    /// <summary>Field number for the "property_lock_guid" field.</summary>
    public const int PropertyLockGuidFieldNumber = 1;
    private uint propertyLockGuid_;
    /// <summary>
    /// ID representing the ownership of the scene property lock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PropertyLockGuid {
      get { return propertyLockGuid_; }
      set {
        propertyLockGuid_ = value;
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 2;
    private global::Narupa.Multiplayer.SceneProperties properties_;
    /// <summary>
    /// Scene properties to be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Narupa.Multiplayer.SceneProperties Properties {
      get { return properties_; }
      set {
        properties_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetScenePropertyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetScenePropertyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropertyLockGuid != other.PropertyLockGuid) return false;
      if (!object.Equals(Properties, other.Properties)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropertyLockGuid != 0) hash ^= PropertyLockGuid.GetHashCode();
      if (properties_ != null) hash ^= Properties.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropertyLockGuid != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PropertyLockGuid);
      }
      if (properties_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Properties);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropertyLockGuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PropertyLockGuid);
      }
      if (properties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Properties);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetScenePropertyRequest other) {
      if (other == null) {
        return;
      }
      if (other.PropertyLockGuid != 0) {
        PropertyLockGuid = other.PropertyLockGuid;
      }
      if (other.properties_ != null) {
        if (properties_ == null) {
          properties_ = new global::Narupa.Multiplayer.SceneProperties();
        }
        Properties.MergeFrom(other.Properties);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PropertyLockGuid = input.ReadUInt32();
            break;
          }
          case 18: {
            if (properties_ == null) {
              properties_ = new global::Narupa.Multiplayer.SceneProperties();
            }
            input.ReadMessage(properties_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a request to join multiplayer.
  /// </summary>
  public sealed partial class JoinMultiplayerRequest : pb::IMessage<JoinMultiplayerRequest> {
    private static readonly pb::MessageParser<JoinMultiplayerRequest> _parser = new pb::MessageParser<JoinMultiplayerRequest>(() => new JoinMultiplayerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinMultiplayerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Narupa.Multiplayer.MultiplayerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinMultiplayerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinMultiplayerRequest(JoinMultiplayerRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinMultiplayerRequest Clone() {
      return new JoinMultiplayerRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinMultiplayerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinMultiplayerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinMultiplayerRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Represents a response to join multiplayer
  /// </summary>
  public sealed partial class JoinMultiplayerResponse : pb::IMessage<JoinMultiplayerResponse> {
    private static readonly pb::MessageParser<JoinMultiplayerResponse> _parser = new pb::MessageParser<JoinMultiplayerResponse>(() => new JoinMultiplayerResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinMultiplayerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Narupa.Multiplayer.MultiplayerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinMultiplayerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinMultiplayerResponse(JoinMultiplayerResponse other) : this() {
      playerID_ = other.playerID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinMultiplayerResponse Clone() {
      return new JoinMultiplayerResponse(this);
    }

    /// <summary>Field number for the "playerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private int playerID_;
    /// <summary>
    /// ID assigned to player.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerID {
      get { return playerID_; }
      set {
        playerID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinMultiplayerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinMultiplayerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID != 0) hash ^= PlayerID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinMultiplayerResponse other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID != 0) {
        PlayerID = other.PlayerID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a lock on the scene 
  /// </summary>
  public sealed partial class LockSceneProperty : pb::IMessage<LockSceneProperty> {
    private static readonly pb::MessageParser<LockSceneProperty> _parser = new pb::MessageParser<LockSceneProperty>(() => new LockSceneProperty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LockSceneProperty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Narupa.Multiplayer.MultiplayerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockSceneProperty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockSceneProperty(LockSceneProperty other) : this() {
      locked_ = other.locked_;
      guid_ = other.guid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockSceneProperty Clone() {
      return new LockSceneProperty(this);
    }

    /// <summary>Field number for the "locked" field.</summary>
    public const int LockedFieldNumber = 1;
    private bool locked_;
    /// <summary>
    /// Whether the scene has been locked. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Locked {
      get { return locked_; }
      set {
        locked_ = value;
      }
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 2;
    private uint guid_;
    /// <summary>
    /// ID representing the lock request. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Guid {
      get { return guid_; }
      set {
        guid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LockSceneProperty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LockSceneProperty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Locked != other.Locked) return false;
      if (Guid != other.Guid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Locked != false) hash ^= Locked.GetHashCode();
      if (Guid != 0) hash ^= Guid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Locked != false) {
        output.WriteRawTag(8);
        output.WriteBool(Locked);
      }
      if (Guid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Guid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Locked != false) {
        size += 1 + 1;
      }
      if (Guid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Guid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LockSceneProperty other) {
      if (other == null) {
        return;
      }
      if (other.Locked != false) {
        Locked = other.Locked;
      }
      if (other.Guid != 0) {
        Guid = other.Guid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Locked = input.ReadBool();
            break;
          }
          case 16: {
            Guid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a reply to setting a scene property. 
  /// </summary>
  public sealed partial class ScenePropertyReply : pb::IMessage<ScenePropertyReply> {
    private static readonly pb::MessageParser<ScenePropertyReply> _parser = new pb::MessageParser<ScenePropertyReply>(() => new ScenePropertyReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScenePropertyReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Narupa.Multiplayer.MultiplayerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePropertyReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePropertyReply(ScenePropertyReply other) : this() {
      propertySet_ = other.propertySet_;
      propertyLockGuid_ = other.propertyLockGuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScenePropertyReply Clone() {
      return new ScenePropertyReply(this);
    }

    /// <summary>Field number for the "property_set" field.</summary>
    public const int PropertySetFieldNumber = 1;
    private bool propertySet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PropertySet {
      get { return propertySet_; }
      set {
        propertySet_ = value;
      }
    }

    /// <summary>Field number for the "property_lock_guid" field.</summary>
    public const int PropertyLockGuidFieldNumber = 2;
    private uint propertyLockGuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PropertyLockGuid {
      get { return propertyLockGuid_; }
      set {
        propertyLockGuid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScenePropertyReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScenePropertyReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropertySet != other.PropertySet) return false;
      if (PropertyLockGuid != other.PropertyLockGuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropertySet != false) hash ^= PropertySet.GetHashCode();
      if (PropertyLockGuid != 0) hash ^= PropertyLockGuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropertySet != false) {
        output.WriteRawTag(8);
        output.WriteBool(PropertySet);
      }
      if (PropertyLockGuid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PropertyLockGuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropertySet != false) {
        size += 1 + 1;
      }
      if (PropertyLockGuid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PropertyLockGuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScenePropertyReply other) {
      if (other == null) {
        return;
      }
      if (other.PropertySet != false) {
        PropertySet = other.PropertySet;
      }
      if (other.PropertyLockGuid != 0) {
        PropertyLockGuid = other.PropertyLockGuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PropertySet = input.ReadBool();
            break;
          }
          case 16: {
            PropertyLockGuid = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a multiplayer scene, for synchronising between VR clients.
  /// </summary>
  public sealed partial class SceneProperties : pb::IMessage<SceneProperties> {
    private static readonly pb::MessageParser<SceneProperties> _parser = new pb::MessageParser<SceneProperties>(() => new SceneProperties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Narupa.Multiplayer.MultiplayerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneProperties(SceneProperties other) : this() {
      position_ = other.position_.Clone();
      rotation_ = other.rotation_.Clone();
      scale_ = other.scale_;
      additional_ = other.additional_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneProperties Clone() {
      return new SceneProperties(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_position_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> position_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Vector3 Position of the scene.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Position {
      get { return position_; }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_rotation_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> rotation_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Quaternion Rotation of the scene.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Rotation {
      get { return rotation_; }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 3;
    private float scale_;
    /// <summary>
    /// Scaling of the scene.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "additional" field.</summary>
    public const int AdditionalFieldNumber = 4;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>.Codec _map_additional_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Value.Parser), 34);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value> additional_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value>();
    /// <summary>
    /// Key word additional arguments.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Value> Additional {
      get { return additional_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!position_.Equals(other.position_)) return false;
      if(!rotation_.Equals(other.rotation_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (!Additional.Equals(other.Additional)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= position_.GetHashCode();
      hash ^= rotation_.GetHashCode();
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      hash ^= Additional.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      position_.WriteTo(output, _repeated_position_codec);
      rotation_.WriteTo(output, _repeated_rotation_codec);
      if (Scale != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Scale);
      }
      additional_.WriteTo(output, _map_additional_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += position_.CalculateSize(_repeated_position_codec);
      size += rotation_.CalculateSize(_repeated_rotation_codec);
      if (Scale != 0F) {
        size += 1 + 4;
      }
      size += additional_.CalculateSize(_map_additional_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneProperties other) {
      if (other == null) {
        return;
      }
      position_.Add(other.position_);
      rotation_.Add(other.rotation_);
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      additional_.Add(other.additional_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            position_.AddEntriesFrom(input, _repeated_position_codec);
            break;
          }
          case 18:
          case 21: {
            rotation_.AddEntriesFrom(input, _repeated_rotation_codec);
            break;
          }
          case 29: {
            Scale = input.ReadFloat();
            break;
          }
          case 34: {
            additional_.AddEntriesFrom(input, _map_additional_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
