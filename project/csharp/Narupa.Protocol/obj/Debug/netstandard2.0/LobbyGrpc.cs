// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: narupa/protocol/lobby/lobby.proto
// </auto-generated>
// Original file comments:
// Copyright (c) Mike O'Connor, University Of Bristol. All rights reserved.
// Licensed under the GPL. See License.txt in the project root for license information.
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Narupa.Lobby {
  public static partial class Lobby
  {
    static readonly string __ServiceName = "narupa.lobby.Lobby";

    static readonly grpc::Marshaller<global::Narupa.Lobby.LobbyInfoRequest> __Marshaller_narupa_lobby_LobbyInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Lobby.LobbyInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Lobby.LobbyInfo> __Marshaller_narupa_lobby_LobbyInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Lobby.LobbyInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Lobby.ServiceInfoRequest> __Marshaller_narupa_lobby_ServiceInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Lobby.ServiceInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Lobby.ServiceInfo> __Marshaller_narupa_lobby_ServiceInfo = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Lobby.ServiceInfo.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Lobby.ServiceRequest> __Marshaller_narupa_lobby_ServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Lobby.ServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Lobby.Service> __Marshaller_narupa_lobby_Service = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Lobby.Service.Parser.ParseFrom);

    static readonly grpc::Method<global::Narupa.Lobby.LobbyInfoRequest, global::Narupa.Lobby.LobbyInfo> __Method_GetLobbyInfo = new grpc::Method<global::Narupa.Lobby.LobbyInfoRequest, global::Narupa.Lobby.LobbyInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLobbyInfo",
        __Marshaller_narupa_lobby_LobbyInfoRequest,
        __Marshaller_narupa_lobby_LobbyInfo);

    static readonly grpc::Method<global::Narupa.Lobby.ServiceInfoRequest, global::Narupa.Lobby.ServiceInfo> __Method_GetServices = new grpc::Method<global::Narupa.Lobby.ServiceInfoRequest, global::Narupa.Lobby.ServiceInfo>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetServices",
        __Marshaller_narupa_lobby_ServiceInfoRequest,
        __Marshaller_narupa_lobby_ServiceInfo);

    static readonly grpc::Method<global::Narupa.Lobby.ServiceRequest, global::Narupa.Lobby.Service> __Method_GetRunningServices = new grpc::Method<global::Narupa.Lobby.ServiceRequest, global::Narupa.Lobby.Service>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetRunningServices",
        __Marshaller_narupa_lobby_ServiceRequest,
        __Marshaller_narupa_lobby_Service);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Narupa.Lobby.LobbyReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Lobby</summary>
    public abstract partial class LobbyBase
    {
      /// <summary>
      /// Gets the lobby info 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Narupa.Lobby.LobbyInfo> GetLobbyInfo(global::Narupa.Lobby.LobbyInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the services this lobby can run.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetServices(global::Narupa.Lobby.ServiceInfoRequest request, grpc::IServerStreamWriter<global::Narupa.Lobby.ServiceInfo> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the currently running services. 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetRunningServices(global::Narupa.Lobby.ServiceRequest request, grpc::IServerStreamWriter<global::Narupa.Lobby.Service> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Lobby</summary>
    public partial class LobbyClient : grpc::ClientBase<LobbyClient>
    {
      /// <summary>Creates a new client for Lobby</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LobbyClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Lobby that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LobbyClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LobbyClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LobbyClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Gets the lobby info 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Narupa.Lobby.LobbyInfo GetLobbyInfo(global::Narupa.Lobby.LobbyInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLobbyInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the lobby info 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Narupa.Lobby.LobbyInfo GetLobbyInfo(global::Narupa.Lobby.LobbyInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLobbyInfo, null, options, request);
      }
      /// <summary>
      /// Gets the lobby info 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Narupa.Lobby.LobbyInfo> GetLobbyInfoAsync(global::Narupa.Lobby.LobbyInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLobbyInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the lobby info 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Narupa.Lobby.LobbyInfo> GetLobbyInfoAsync(global::Narupa.Lobby.LobbyInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLobbyInfo, null, options, request);
      }
      /// <summary>
      /// Gets the services this lobby can run.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Narupa.Lobby.ServiceInfo> GetServices(global::Narupa.Lobby.ServiceInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the services this lobby can run.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Narupa.Lobby.ServiceInfo> GetServices(global::Narupa.Lobby.ServiceInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetServices, null, options, request);
      }
      /// <summary>
      /// Gets the currently running services. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Narupa.Lobby.Service> GetRunningServices(global::Narupa.Lobby.ServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRunningServices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the currently running services. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Narupa.Lobby.Service> GetRunningServices(global::Narupa.Lobby.ServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetRunningServices, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LobbyClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LobbyClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(LobbyBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetLobbyInfo, serviceImpl.GetLobbyInfo)
          .AddMethod(__Method_GetServices, serviceImpl.GetServices)
          .AddMethod(__Method_GetRunningServices, serviceImpl.GetRunningServices).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, LobbyBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetLobbyInfo, serviceImpl.GetLobbyInfo);
      serviceBinder.AddMethod(__Method_GetServices, serviceImpl.GetServices);
      serviceBinder.AddMethod(__Method_GetRunningServices, serviceImpl.GetRunningServices);
    }

  }
}
#endregion
