// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: narupa/protocol/multiplayer/multiplayer.proto
// </auto-generated>
// Original file comments:
// Copyright (c) Mike O'Connor, University Of Bristol. All rights reserved.
// Licensed under the GPL. See License.txt in the project root for license information.
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Narupa.Multiplayer {
  /// <summary>
  /// Defines a VR multiplayer service.
  /// </summary>
  public static partial class Multiplayer
  {
    static readonly string __ServiceName = "narupa.multiplayer.Multiplayer";

    static readonly grpc::Marshaller<global::Narupa.Multiplayer.SubscribeToAvatarsRequest> __Marshaller_narupa_multiplayer_SubscribeToAvatarsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Multiplayer.SubscribeToAvatarsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Multiplayer.Avatar> __Marshaller_narupa_multiplayer_Avatar = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Multiplayer.Avatar.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Multiplayer.PublishAvatarReply> __Marshaller_narupa_multiplayer_PublishAvatarReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Multiplayer.PublishAvatarReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Multiplayer.ScenePropertyRequest> __Marshaller_narupa_multiplayer_ScenePropertyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Multiplayer.ScenePropertyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Multiplayer.SceneProperties> __Marshaller_narupa_multiplayer_SceneProperties = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Multiplayer.SceneProperties.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Multiplayer.LockSceneProperty> __Marshaller_narupa_multiplayer_LockSceneProperty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Multiplayer.LockSceneProperty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Multiplayer.SetScenePropertyRequest> __Marshaller_narupa_multiplayer_SetScenePropertyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Multiplayer.SetScenePropertyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Multiplayer.ScenePropertyReply> __Marshaller_narupa_multiplayer_ScenePropertyReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Multiplayer.ScenePropertyReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Multiplayer.JoinMultiplayerRequest> __Marshaller_narupa_multiplayer_JoinMultiplayerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Multiplayer.JoinMultiplayerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Multiplayer.JoinMultiplayerResponse> __Marshaller_narupa_multiplayer_JoinMultiplayerResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Multiplayer.JoinMultiplayerResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Narupa.Multiplayer.SubscribeToAvatarsRequest, global::Narupa.Multiplayer.Avatar> __Method_SubscribeToAvatars = new grpc::Method<global::Narupa.Multiplayer.SubscribeToAvatarsRequest, global::Narupa.Multiplayer.Avatar>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeToAvatars",
        __Marshaller_narupa_multiplayer_SubscribeToAvatarsRequest,
        __Marshaller_narupa_multiplayer_Avatar);

    static readonly grpc::Method<global::Narupa.Multiplayer.Avatar, global::Narupa.Multiplayer.PublishAvatarReply> __Method_PublishAvatar = new grpc::Method<global::Narupa.Multiplayer.Avatar, global::Narupa.Multiplayer.PublishAvatarReply>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "PublishAvatar",
        __Marshaller_narupa_multiplayer_Avatar,
        __Marshaller_narupa_multiplayer_PublishAvatarReply);

    static readonly grpc::Method<global::Narupa.Multiplayer.ScenePropertyRequest, global::Narupa.Multiplayer.SceneProperties> __Method_SubscribeToSceneProperties = new grpc::Method<global::Narupa.Multiplayer.ScenePropertyRequest, global::Narupa.Multiplayer.SceneProperties>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeToSceneProperties",
        __Marshaller_narupa_multiplayer_ScenePropertyRequest,
        __Marshaller_narupa_multiplayer_SceneProperties);

    static readonly grpc::Method<global::Narupa.Multiplayer.LockSceneProperty, global::Narupa.Multiplayer.LockSceneProperty> __Method_SetLockScene = new grpc::Method<global::Narupa.Multiplayer.LockSceneProperty, global::Narupa.Multiplayer.LockSceneProperty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetLockScene",
        __Marshaller_narupa_multiplayer_LockSceneProperty,
        __Marshaller_narupa_multiplayer_LockSceneProperty);

    static readonly grpc::Method<global::Narupa.Multiplayer.LockSceneProperty, global::Narupa.Multiplayer.LockSceneProperty> __Method_UnlockScene = new grpc::Method<global::Narupa.Multiplayer.LockSceneProperty, global::Narupa.Multiplayer.LockSceneProperty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnlockScene",
        __Marshaller_narupa_multiplayer_LockSceneProperty,
        __Marshaller_narupa_multiplayer_LockSceneProperty);

    static readonly grpc::Method<global::Narupa.Multiplayer.SetScenePropertyRequest, global::Narupa.Multiplayer.ScenePropertyReply> __Method_SetSceneProperty = new grpc::Method<global::Narupa.Multiplayer.SetScenePropertyRequest, global::Narupa.Multiplayer.ScenePropertyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetSceneProperty",
        __Marshaller_narupa_multiplayer_SetScenePropertyRequest,
        __Marshaller_narupa_multiplayer_ScenePropertyReply);

    static readonly grpc::Method<global::Narupa.Multiplayer.JoinMultiplayerRequest, global::Narupa.Multiplayer.JoinMultiplayerResponse> __Method_JoinMultiplayer = new grpc::Method<global::Narupa.Multiplayer.JoinMultiplayerRequest, global::Narupa.Multiplayer.JoinMultiplayerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "JoinMultiplayer",
        __Marshaller_narupa_multiplayer_JoinMultiplayerRequest,
        __Marshaller_narupa_multiplayer_JoinMultiplayerResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Narupa.Multiplayer.MultiplayerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Multiplayer</summary>
    public abstract partial class MultiplayerBase
    {
      /// <summary>
      /// Represents an avatar stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SubscribeToAvatars(global::Narupa.Multiplayer.SubscribeToAvatarsRequest request, grpc::IServerStreamWriter<global::Narupa.Multiplayer.Avatar> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Client publish avatar stream.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Narupa.Multiplayer.PublishAvatarReply> PublishAvatar(grpc::IAsyncStreamReader<global::Narupa.Multiplayer.Avatar> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Joins the stream of updates to the multiplayer scene properties.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SubscribeToSceneProperties(global::Narupa.Multiplayer.ScenePropertyRequest request, grpc::IServerStreamWriter<global::Narupa.Multiplayer.SceneProperties> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request to lock the scene.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Narupa.Multiplayer.LockSceneProperty> SetLockScene(global::Narupa.Multiplayer.LockSceneProperty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request to unlock the scene.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Narupa.Multiplayer.LockSceneProperty> UnlockScene(global::Narupa.Multiplayer.LockSceneProperty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request to set the scene properties.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Narupa.Multiplayer.ScenePropertyReply> SetSceneProperty(global::Narupa.Multiplayer.SetScenePropertyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request to join multiplayer session, and receive a PlayerID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Narupa.Multiplayer.JoinMultiplayerResponse> JoinMultiplayer(global::Narupa.Multiplayer.JoinMultiplayerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Multiplayer</summary>
    public partial class MultiplayerClient : grpc::ClientBase<MultiplayerClient>
    {
      /// <summary>Creates a new client for Multiplayer</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MultiplayerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Multiplayer that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MultiplayerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MultiplayerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MultiplayerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Represents an avatar stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Narupa.Multiplayer.Avatar> SubscribeToAvatars(global::Narupa.Multiplayer.SubscribeToAvatarsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeToAvatars(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Represents an avatar stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Narupa.Multiplayer.Avatar> SubscribeToAvatars(global::Narupa.Multiplayer.SubscribeToAvatarsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeToAvatars, null, options, request);
      }
      /// <summary>
      /// Client publish avatar stream.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Narupa.Multiplayer.Avatar, global::Narupa.Multiplayer.PublishAvatarReply> PublishAvatar(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PublishAvatar(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Client publish avatar stream.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Narupa.Multiplayer.Avatar, global::Narupa.Multiplayer.PublishAvatarReply> PublishAvatar(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_PublishAvatar, null, options);
      }
      /// <summary>
      /// Joins the stream of updates to the multiplayer scene properties.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Narupa.Multiplayer.SceneProperties> SubscribeToSceneProperties(global::Narupa.Multiplayer.ScenePropertyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeToSceneProperties(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Joins the stream of updates to the multiplayer scene properties.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Narupa.Multiplayer.SceneProperties> SubscribeToSceneProperties(global::Narupa.Multiplayer.ScenePropertyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeToSceneProperties, null, options, request);
      }
      /// <summary>
      /// Request to lock the scene.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Narupa.Multiplayer.LockSceneProperty SetLockScene(global::Narupa.Multiplayer.LockSceneProperty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLockScene(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request to lock the scene.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Narupa.Multiplayer.LockSceneProperty SetLockScene(global::Narupa.Multiplayer.LockSceneProperty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetLockScene, null, options, request);
      }
      /// <summary>
      /// Request to lock the scene.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Narupa.Multiplayer.LockSceneProperty> SetLockSceneAsync(global::Narupa.Multiplayer.LockSceneProperty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLockSceneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request to lock the scene.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Narupa.Multiplayer.LockSceneProperty> SetLockSceneAsync(global::Narupa.Multiplayer.LockSceneProperty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetLockScene, null, options, request);
      }
      /// <summary>
      /// Request to unlock the scene.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Narupa.Multiplayer.LockSceneProperty UnlockScene(global::Narupa.Multiplayer.LockSceneProperty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnlockScene(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request to unlock the scene.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Narupa.Multiplayer.LockSceneProperty UnlockScene(global::Narupa.Multiplayer.LockSceneProperty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnlockScene, null, options, request);
      }
      /// <summary>
      /// Request to unlock the scene.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Narupa.Multiplayer.LockSceneProperty> UnlockSceneAsync(global::Narupa.Multiplayer.LockSceneProperty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnlockSceneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request to unlock the scene.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Narupa.Multiplayer.LockSceneProperty> UnlockSceneAsync(global::Narupa.Multiplayer.LockSceneProperty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnlockScene, null, options, request);
      }
      /// <summary>
      /// Request to set the scene properties.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Narupa.Multiplayer.ScenePropertyReply SetSceneProperty(global::Narupa.Multiplayer.SetScenePropertyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSceneProperty(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request to set the scene properties.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Narupa.Multiplayer.ScenePropertyReply SetSceneProperty(global::Narupa.Multiplayer.SetScenePropertyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSceneProperty, null, options, request);
      }
      /// <summary>
      /// Request to set the scene properties.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Narupa.Multiplayer.ScenePropertyReply> SetScenePropertyAsync(global::Narupa.Multiplayer.SetScenePropertyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetScenePropertyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request to set the scene properties.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Narupa.Multiplayer.ScenePropertyReply> SetScenePropertyAsync(global::Narupa.Multiplayer.SetScenePropertyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSceneProperty, null, options, request);
      }
      /// <summary>
      /// Request to join multiplayer session, and receive a PlayerID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Narupa.Multiplayer.JoinMultiplayerResponse JoinMultiplayer(global::Narupa.Multiplayer.JoinMultiplayerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinMultiplayer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request to join multiplayer session, and receive a PlayerID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Narupa.Multiplayer.JoinMultiplayerResponse JoinMultiplayer(global::Narupa.Multiplayer.JoinMultiplayerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_JoinMultiplayer, null, options, request);
      }
      /// <summary>
      /// Request to join multiplayer session, and receive a PlayerID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Narupa.Multiplayer.JoinMultiplayerResponse> JoinMultiplayerAsync(global::Narupa.Multiplayer.JoinMultiplayerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinMultiplayerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request to join multiplayer session, and receive a PlayerID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Narupa.Multiplayer.JoinMultiplayerResponse> JoinMultiplayerAsync(global::Narupa.Multiplayer.JoinMultiplayerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_JoinMultiplayer, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MultiplayerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MultiplayerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MultiplayerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SubscribeToAvatars, serviceImpl.SubscribeToAvatars)
          .AddMethod(__Method_PublishAvatar, serviceImpl.PublishAvatar)
          .AddMethod(__Method_SubscribeToSceneProperties, serviceImpl.SubscribeToSceneProperties)
          .AddMethod(__Method_SetLockScene, serviceImpl.SetLockScene)
          .AddMethod(__Method_UnlockScene, serviceImpl.UnlockScene)
          .AddMethod(__Method_SetSceneProperty, serviceImpl.SetSceneProperty)
          .AddMethod(__Method_JoinMultiplayer, serviceImpl.JoinMultiplayer).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MultiplayerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SubscribeToAvatars, serviceImpl.SubscribeToAvatars);
      serviceBinder.AddMethod(__Method_PublishAvatar, serviceImpl.PublishAvatar);
      serviceBinder.AddMethod(__Method_SubscribeToSceneProperties, serviceImpl.SubscribeToSceneProperties);
      serviceBinder.AddMethod(__Method_SetLockScene, serviceImpl.SetLockScene);
      serviceBinder.AddMethod(__Method_UnlockScene, serviceImpl.UnlockScene);
      serviceBinder.AddMethod(__Method_SetSceneProperty, serviceImpl.SetSceneProperty);
      serviceBinder.AddMethod(__Method_JoinMultiplayer, serviceImpl.JoinMultiplayer);
    }

  }
}
#endregion
