// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Narupa/Protocol/Selection/SelectionService.proto
// </auto-generated>
// Original file comments:
// Copyright (c) Alex Jamieson-Binnie. All rights reserved.
// Licensed under the GPL. See License.txt in the project root for license information.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Narupa.Protocol.Selection {
  public static partial class SelectionService
  {
    static readonly string __ServiceName = "narupa.protocol.selection.SelectionService";

    static readonly grpc::Marshaller<global::Narupa.Protocol.Selection.AddSelectionRequest> __Marshaller_narupa_protocol_selection_AddSelectionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.Selection.AddSelectionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Protocol.Selection.AddSelectionResponse> __Marshaller_narupa_protocol_selection_AddSelectionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.Selection.AddSelectionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Protocol.Selection.RemoveSelectionRequest> __Marshaller_narupa_protocol_selection_RemoveSelectionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.Selection.RemoveSelectionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Protocol.Selection.RemoveSelectionResponse> __Marshaller_narupa_protocol_selection_RemoveSelectionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.Selection.RemoveSelectionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Protocol.Selection.SetSelectionRequest> __Marshaller_narupa_protocol_selection_SetSelectionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.Selection.SetSelectionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Protocol.Selection.SetSelectionResponse> __Marshaller_narupa_protocol_selection_SetSelectionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.Selection.SetSelectionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Narupa.Protocol.Selection.AddSelectionRequest, global::Narupa.Protocol.Selection.AddSelectionResponse> __Method_AddSelection = new grpc::Method<global::Narupa.Protocol.Selection.AddSelectionRequest, global::Narupa.Protocol.Selection.AddSelectionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddSelection",
        __Marshaller_narupa_protocol_selection_AddSelectionRequest,
        __Marshaller_narupa_protocol_selection_AddSelectionResponse);

    static readonly grpc::Method<global::Narupa.Protocol.Selection.RemoveSelectionRequest, global::Narupa.Protocol.Selection.RemoveSelectionResponse> __Method_RemoveSelection = new grpc::Method<global::Narupa.Protocol.Selection.RemoveSelectionRequest, global::Narupa.Protocol.Selection.RemoveSelectionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveSelection",
        __Marshaller_narupa_protocol_selection_RemoveSelectionRequest,
        __Marshaller_narupa_protocol_selection_RemoveSelectionResponse);

    static readonly grpc::Method<global::Narupa.Protocol.Selection.SetSelectionRequest, global::Narupa.Protocol.Selection.SetSelectionResponse> __Method_SetSelection = new grpc::Method<global::Narupa.Protocol.Selection.SetSelectionRequest, global::Narupa.Protocol.Selection.SetSelectionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetSelection",
        __Marshaller_narupa_protocol_selection_SetSelectionRequest,
        __Marshaller_narupa_protocol_selection_SetSelectionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Narupa.Protocol.Selection.SelectionServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SelectionService</summary>
    public abstract partial class SelectionServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Narupa.Protocol.Selection.AddSelectionResponse> AddSelection(global::Narupa.Protocol.Selection.AddSelectionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Narupa.Protocol.Selection.RemoveSelectionResponse> RemoveSelection(global::Narupa.Protocol.Selection.RemoveSelectionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Narupa.Protocol.Selection.SetSelectionResponse> SetSelection(global::Narupa.Protocol.Selection.SetSelectionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SelectionService</summary>
    public partial class SelectionServiceClient : grpc::ClientBase<SelectionServiceClient>
    {
      /// <summary>Creates a new client for SelectionService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SelectionServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SelectionService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SelectionServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SelectionServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SelectionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Narupa.Protocol.Selection.AddSelectionResponse AddSelection(global::Narupa.Protocol.Selection.AddSelectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSelection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Narupa.Protocol.Selection.AddSelectionResponse AddSelection(global::Narupa.Protocol.Selection.AddSelectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSelection, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Narupa.Protocol.Selection.AddSelectionResponse> AddSelectionAsync(global::Narupa.Protocol.Selection.AddSelectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSelectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Narupa.Protocol.Selection.AddSelectionResponse> AddSelectionAsync(global::Narupa.Protocol.Selection.AddSelectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSelection, null, options, request);
      }
      public virtual global::Narupa.Protocol.Selection.RemoveSelectionResponse RemoveSelection(global::Narupa.Protocol.Selection.RemoveSelectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveSelection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Narupa.Protocol.Selection.RemoveSelectionResponse RemoveSelection(global::Narupa.Protocol.Selection.RemoveSelectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveSelection, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Narupa.Protocol.Selection.RemoveSelectionResponse> RemoveSelectionAsync(global::Narupa.Protocol.Selection.RemoveSelectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveSelectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Narupa.Protocol.Selection.RemoveSelectionResponse> RemoveSelectionAsync(global::Narupa.Protocol.Selection.RemoveSelectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveSelection, null, options, request);
      }
      public virtual global::Narupa.Protocol.Selection.SetSelectionResponse SetSelection(global::Narupa.Protocol.Selection.SetSelectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSelection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Narupa.Protocol.Selection.SetSelectionResponse SetSelection(global::Narupa.Protocol.Selection.SetSelectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSelection, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Narupa.Protocol.Selection.SetSelectionResponse> SetSelectionAsync(global::Narupa.Protocol.Selection.SetSelectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSelectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Narupa.Protocol.Selection.SetSelectionResponse> SetSelectionAsync(global::Narupa.Protocol.Selection.SetSelectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSelection, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SelectionServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SelectionServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SelectionServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddSelection, serviceImpl.AddSelection)
          .AddMethod(__Method_RemoveSelection, serviceImpl.RemoveSelection)
          .AddMethod(__Method_SetSelection, serviceImpl.SetSelection).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SelectionServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddSelection, serviceImpl.AddSelection);
      serviceBinder.AddMethod(__Method_RemoveSelection, serviceImpl.RemoveSelection);
      serviceBinder.AddMethod(__Method_SetSelection, serviceImpl.SetSelection);
    }

  }
}
#endregion
