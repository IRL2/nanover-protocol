// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: narupa/protocol/instance/molecule_provider.proto
// </auto-generated>
// Original file comments:
// Copyright (c) Alex Jamieson-Binnie. All rights reserved.
// Licensed under the GPL. See License.txt in the project root for license information.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Narupa.Protocol.Instance {
  public static partial class MoleculeProvider
  {
    static readonly string __ServiceName = "narupa.protocol.instance.MoleculeProvider";

    static readonly grpc::Marshaller<global::Narupa.Protocol.Instance.GetTopologyRequest> __Marshaller_narupa_protocol_instance_GetTopologyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.Instance.GetTopologyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Protocol.Instance.GetTopologyResponse> __Marshaller_narupa_protocol_instance_GetTopologyResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.Instance.GetTopologyResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Protocol.Instance.GetFrameRequest> __Marshaller_narupa_protocol_instance_GetFrameRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.Instance.GetFrameRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Protocol.Instance.GetFrameResponse> __Marshaller_narupa_protocol_instance_GetFrameResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.Instance.GetFrameResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Protocol.Instance.GetStructureRequest> __Marshaller_narupa_protocol_instance_GetStructureRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.Instance.GetStructureRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Protocol.Instance.GetStructureReply> __Marshaller_narupa_protocol_instance_GetStructureReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.Instance.GetStructureReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Narupa.Protocol.Instance.GetTopologyRequest, global::Narupa.Protocol.Instance.GetTopologyResponse> __Method_SubscribeTopology = new grpc::Method<global::Narupa.Protocol.Instance.GetTopologyRequest, global::Narupa.Protocol.Instance.GetTopologyResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeTopology",
        __Marshaller_narupa_protocol_instance_GetTopologyRequest,
        __Marshaller_narupa_protocol_instance_GetTopologyResponse);

    static readonly grpc::Method<global::Narupa.Protocol.Instance.GetFrameRequest, global::Narupa.Protocol.Instance.GetFrameResponse> __Method_SubscribeFrame = new grpc::Method<global::Narupa.Protocol.Instance.GetFrameRequest, global::Narupa.Protocol.Instance.GetFrameResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeFrame",
        __Marshaller_narupa_protocol_instance_GetFrameRequest,
        __Marshaller_narupa_protocol_instance_GetFrameResponse);

    static readonly grpc::Method<global::Narupa.Protocol.Instance.GetStructureRequest, global::Narupa.Protocol.Instance.GetStructureReply> __Method_GetStructure = new grpc::Method<global::Narupa.Protocol.Instance.GetStructureRequest, global::Narupa.Protocol.Instance.GetStructureReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStructure",
        __Marshaller_narupa_protocol_instance_GetStructureRequest,
        __Marshaller_narupa_protocol_instance_GetStructureReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Narupa.Protocol.Instance.MoleculeProviderReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MoleculeProvider</summary>
    public abstract partial class MoleculeProviderBase
    {
      public virtual global::System.Threading.Tasks.Task SubscribeTopology(global::Narupa.Protocol.Instance.GetTopologyRequest request, grpc::IServerStreamWriter<global::Narupa.Protocol.Instance.GetTopologyResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SubscribeFrame(global::Narupa.Protocol.Instance.GetFrameRequest request, grpc::IServerStreamWriter<global::Narupa.Protocol.Instance.GetFrameResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Narupa.Protocol.Instance.GetStructureReply> GetStructure(global::Narupa.Protocol.Instance.GetStructureRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MoleculeProvider</summary>
    public partial class MoleculeProviderClient : grpc::ClientBase<MoleculeProviderClient>
    {
      /// <summary>Creates a new client for MoleculeProvider</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MoleculeProviderClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MoleculeProvider that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MoleculeProviderClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MoleculeProviderClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MoleculeProviderClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Narupa.Protocol.Instance.GetTopologyResponse> SubscribeTopology(global::Narupa.Protocol.Instance.GetTopologyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeTopology(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Narupa.Protocol.Instance.GetTopologyResponse> SubscribeTopology(global::Narupa.Protocol.Instance.GetTopologyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeTopology, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Narupa.Protocol.Instance.GetFrameResponse> SubscribeFrame(global::Narupa.Protocol.Instance.GetFrameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeFrame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Narupa.Protocol.Instance.GetFrameResponse> SubscribeFrame(global::Narupa.Protocol.Instance.GetFrameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeFrame, null, options, request);
      }
      public virtual global::Narupa.Protocol.Instance.GetStructureReply GetStructure(global::Narupa.Protocol.Instance.GetStructureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStructure(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Narupa.Protocol.Instance.GetStructureReply GetStructure(global::Narupa.Protocol.Instance.GetStructureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStructure, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Narupa.Protocol.Instance.GetStructureReply> GetStructureAsync(global::Narupa.Protocol.Instance.GetStructureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStructureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Narupa.Protocol.Instance.GetStructureReply> GetStructureAsync(global::Narupa.Protocol.Instance.GetStructureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStructure, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MoleculeProviderClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MoleculeProviderClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MoleculeProviderBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SubscribeTopology, serviceImpl.SubscribeTopology)
          .AddMethod(__Method_SubscribeFrame, serviceImpl.SubscribeFrame)
          .AddMethod(__Method_GetStructure, serviceImpl.GetStructure).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MoleculeProviderBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SubscribeTopology, serviceImpl.SubscribeTopology);
      serviceBinder.AddMethod(__Method_SubscribeFrame, serviceImpl.SubscribeFrame);
      serviceBinder.AddMethod(__Method_GetStructure, serviceImpl.GetStructure);
    }

  }
}
#endregion
