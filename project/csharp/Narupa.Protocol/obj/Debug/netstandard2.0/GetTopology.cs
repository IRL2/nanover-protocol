// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Narupa/Protocol/instance/get_topology.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Narupa.Protocol.Instance {

  /// <summary>Holder for reflection information generated from Narupa/Protocol/instance/get_topology.proto</summary>
  public static partial class GetTopologyReflection {

    #region Descriptor
    /// <summary>File descriptor for Narupa/Protocol/instance/get_topology.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GetTopologyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CitOYXJ1cGEvUHJvdG9jb2wvaW5zdGFuY2UvZ2V0X3RvcG9sb2d5LnByb3Rv",
            "EhhuYXJ1cGEucHJvdG9jb2wuaW5zdGFuY2UaJ25hcnVwYS9wcm90b2NvbC90",
            "b3BvbG9neS90b3BvbG9neS5wcm90bxofbmFydXBhL3Byb3RvY29sL2RlbGlt",
            "aXRlci5wcm90byIUChJHZXRUb3BvbG9neVJlcXVlc3QiogEKE0dldFRvcG9s",
            "b2d5UmVzcG9uc2USEwoLZnJhbWVfaW5kZXgYASABKA0SOgoIdG9wb2xvZ3kY",
            "AiABKAsyJi5uYXJ1cGEucHJvdG9jb2wudG9wb2xvZ3kuVG9wb2xvZ3lEYXRh",
            "SAASLwoJZGVsaW1pdGVyGAMgASgOMhoubmFydXBhLnByb3RvY29sLkRlbGlt",
            "aXRlckgAQgkKB2NvbnRlbnRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Narupa.Protocol.Topology.TopologyReflection.Descriptor, global::Narupa.Protocol.DelimiterReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Narupa.Protocol.Instance.GetTopologyRequest), global::Narupa.Protocol.Instance.GetTopologyRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Narupa.Protocol.Instance.GetTopologyResponse), global::Narupa.Protocol.Instance.GetTopologyResponse.Parser, new[]{ "FrameIndex", "Topology", "Delimiter" }, new[]{ "Content" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GetTopologyRequest : pb::IMessage<GetTopologyRequest> {
    private static readonly pb::MessageParser<GetTopologyRequest> _parser = new pb::MessageParser<GetTopologyRequest>(() => new GetTopologyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTopologyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Narupa.Protocol.Instance.GetTopologyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTopologyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTopologyRequest(GetTopologyRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTopologyRequest Clone() {
      return new GetTopologyRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTopologyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTopologyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTopologyRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GetTopologyResponse : pb::IMessage<GetTopologyResponse> {
    private static readonly pb::MessageParser<GetTopologyResponse> _parser = new pb::MessageParser<GetTopologyResponse>(() => new GetTopologyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTopologyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Narupa.Protocol.Instance.GetTopologyReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTopologyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTopologyResponse(GetTopologyResponse other) : this() {
      frameIndex_ = other.frameIndex_;
      switch (other.ContentCase) {
        case ContentOneofCase.Topology:
          Topology = other.Topology.Clone();
          break;
        case ContentOneofCase.Delimiter:
          Delimiter = other.Delimiter;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTopologyResponse Clone() {
      return new GetTopologyResponse(this);
    }

    /// <summary>Field number for the "frame_index" field.</summary>
    public const int FrameIndexFieldNumber = 1;
    private uint frameIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameIndex {
      get { return frameIndex_; }
      set {
        frameIndex_ = value;
      }
    }

    /// <summary>Field number for the "topology" field.</summary>
    public const int TopologyFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Narupa.Protocol.Topology.TopologyData Topology {
      get { return contentCase_ == ContentOneofCase.Topology ? (global::Narupa.Protocol.Topology.TopologyData) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Topology;
      }
    }

    /// <summary>Field number for the "delimiter" field.</summary>
    public const int DelimiterFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Narupa.Protocol.Delimiter Delimiter {
      get { return contentCase_ == ContentOneofCase.Delimiter ? (global::Narupa.Protocol.Delimiter) content_ : 0; }
      set {
        content_ = value;
        contentCase_ = ContentOneofCase.Delimiter;
      }
    }

    private object content_;
    /// <summary>Enum of possible cases for the "content" oneof.</summary>
    public enum ContentOneofCase {
      None = 0,
      Topology = 2,
      Delimiter = 3,
    }
    private ContentOneofCase contentCase_ = ContentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentOneofCase ContentCase {
      get { return contentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      contentCase_ = ContentOneofCase.None;
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTopologyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTopologyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameIndex != other.FrameIndex) return false;
      if (!object.Equals(Topology, other.Topology)) return false;
      if (Delimiter != other.Delimiter) return false;
      if (ContentCase != other.ContentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameIndex != 0) hash ^= FrameIndex.GetHashCode();
      if (contentCase_ == ContentOneofCase.Topology) hash ^= Topology.GetHashCode();
      if (contentCase_ == ContentOneofCase.Delimiter) hash ^= Delimiter.GetHashCode();
      hash ^= (int) contentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FrameIndex);
      }
      if (contentCase_ == ContentOneofCase.Topology) {
        output.WriteRawTag(18);
        output.WriteMessage(Topology);
      }
      if (contentCase_ == ContentOneofCase.Delimiter) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Delimiter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameIndex);
      }
      if (contentCase_ == ContentOneofCase.Topology) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Topology);
      }
      if (contentCase_ == ContentOneofCase.Delimiter) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Delimiter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTopologyResponse other) {
      if (other == null) {
        return;
      }
      if (other.FrameIndex != 0) {
        FrameIndex = other.FrameIndex;
      }
      switch (other.ContentCase) {
        case ContentOneofCase.Topology:
          if (Topology == null) {
            Topology = new global::Narupa.Protocol.Topology.TopologyData();
          }
          Topology.MergeFrom(other.Topology);
          break;
        case ContentOneofCase.Delimiter:
          Delimiter = other.Delimiter;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FrameIndex = input.ReadUInt32();
            break;
          }
          case 18: {
            global::Narupa.Protocol.Topology.TopologyData subBuilder = new global::Narupa.Protocol.Topology.TopologyData();
            if (contentCase_ == ContentOneofCase.Topology) {
              subBuilder.MergeFrom(Topology);
            }
            input.ReadMessage(subBuilder);
            Topology = subBuilder;
            break;
          }
          case 24: {
            content_ = input.ReadEnum();
            contentCase_ = ContentOneofCase.Delimiter;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
