// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: narupa/protocol/multiplayer/async_test.proto
// </auto-generated>
// Original file comments:
// Copyright (c) Mike O'Connor, University Of Bristol. All rights reserved.
// Licensed under the GPL. See License.txt in the project root for license information.
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Narupa.Multiplayer {
  public static partial class Test
  {
    static readonly string __ServiceName = "narupa.multiplayer.Test";

    static readonly grpc::Marshaller<global::Narupa.Multiplayer.Request> __Marshaller_narupa_multiplayer_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Multiplayer.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Multiplayer.Response> __Marshaller_narupa_multiplayer_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Multiplayer.Response.Parser.ParseFrom);

    static readonly grpc::Method<global::Narupa.Multiplayer.Request, global::Narupa.Multiplayer.Response> __Method_DoSomething = new grpc::Method<global::Narupa.Multiplayer.Request, global::Narupa.Multiplayer.Response>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "DoSomething",
        __Marshaller_narupa_multiplayer_Request,
        __Marshaller_narupa_multiplayer_Response);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Narupa.Multiplayer.AsyncTestReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Test</summary>
    public abstract partial class TestBase
    {
      /// <summary>
      /// Represents an avatar stream.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task DoSomething(global::Narupa.Multiplayer.Request request, grpc::IServerStreamWriter<global::Narupa.Multiplayer.Response> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Test</summary>
    public partial class TestClient : grpc::ClientBase<TestClient>
    {
      /// <summary>Creates a new client for Test</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TestClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Test that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TestClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TestClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TestClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Represents an avatar stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Narupa.Multiplayer.Response> DoSomething(global::Narupa.Multiplayer.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DoSomething(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Represents an avatar stream.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Narupa.Multiplayer.Response> DoSomething(global::Narupa.Multiplayer.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_DoSomething, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TestClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TestClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TestBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DoSomething, serviceImpl.DoSomething).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TestBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_DoSomething, serviceImpl.DoSomething);
    }

  }
}
#endregion
