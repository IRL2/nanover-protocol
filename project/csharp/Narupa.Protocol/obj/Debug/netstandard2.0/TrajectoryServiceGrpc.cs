// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: narupa/protocol/instance/trajectory_service.proto
// </auto-generated>
// Original file comments:
// Copyright (c) Alex Jamieson-Binnie. All rights reserved.
// Licensed under the GPL. See License.txt in the project root for license information.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Narupa.Protocol.Instance {
  /// <summary>
  /// A service which provides access to frames of a trajectory, which may either be precomputed or represent a live simulation. It can also be used to obtain one or more frames on demand, allowing molecules or trajectories to be generated based on requests 
  /// </summary>
  public static partial class TrajectoryService
  {
    static readonly string __ServiceName = "narupa.protocol.instance.TrajectoryService";

    static readonly grpc::Marshaller<global::Narupa.Protocol.Instance.GetFrameRequest> __Marshaller_narupa_protocol_instance_GetFrameRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.Instance.GetFrameRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Protocol.Instance.GetFrameResponse> __Marshaller_narupa_protocol_instance_GetFrameResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.Instance.GetFrameResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Narupa.Protocol.Instance.GetFrameRequest, global::Narupa.Protocol.Instance.GetFrameResponse> __Method_SubscribeFrames = new grpc::Method<global::Narupa.Protocol.Instance.GetFrameRequest, global::Narupa.Protocol.Instance.GetFrameResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeFrames",
        __Marshaller_narupa_protocol_instance_GetFrameRequest,
        __Marshaller_narupa_protocol_instance_GetFrameResponse);

    static readonly grpc::Method<global::Narupa.Protocol.Instance.GetFrameRequest, global::Narupa.Protocol.Instance.GetFrameResponse> __Method_GetFrames = new grpc::Method<global::Narupa.Protocol.Instance.GetFrameRequest, global::Narupa.Protocol.Instance.GetFrameResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetFrames",
        __Marshaller_narupa_protocol_instance_GetFrameRequest,
        __Marshaller_narupa_protocol_instance_GetFrameResponse);

    static readonly grpc::Method<global::Narupa.Protocol.Instance.GetFrameRequest, global::Narupa.Protocol.Instance.GetFrameResponse> __Method_GetFrame = new grpc::Method<global::Narupa.Protocol.Instance.GetFrameRequest, global::Narupa.Protocol.Instance.GetFrameResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFrame",
        __Marshaller_narupa_protocol_instance_GetFrameRequest,
        __Marshaller_narupa_protocol_instance_GetFrameResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Narupa.Protocol.Instance.TrajectoryServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TrajectoryService</summary>
    public abstract partial class TrajectoryServiceBase
    {
      /// <summary>
      /// Subscribe to a continuous updating source of frames. Frames are added to the stream when they are available 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SubscribeFrames(global::Narupa.Protocol.Instance.GetFrameRequest request, grpc::IServerStreamWriter<global::Narupa.Protocol.Instance.GetFrameResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request a set of frames specified in the request 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task GetFrames(global::Narupa.Protocol.Instance.GetFrameRequest request, grpc::IServerStreamWriter<global::Narupa.Protocol.Instance.GetFrameResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request a specific frame. This may be used to provider a 'molecule-on-demand' service 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Narupa.Protocol.Instance.GetFrameResponse> GetFrame(global::Narupa.Protocol.Instance.GetFrameRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TrajectoryService</summary>
    public partial class TrajectoryServiceClient : grpc::ClientBase<TrajectoryServiceClient>
    {
      /// <summary>Creates a new client for TrajectoryService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TrajectoryServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TrajectoryService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TrajectoryServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TrajectoryServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TrajectoryServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Subscribe to a continuous updating source of frames. Frames are added to the stream when they are available 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Narupa.Protocol.Instance.GetFrameResponse> SubscribeFrames(global::Narupa.Protocol.Instance.GetFrameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeFrames(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribe to a continuous updating source of frames. Frames are added to the stream when they are available 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Narupa.Protocol.Instance.GetFrameResponse> SubscribeFrames(global::Narupa.Protocol.Instance.GetFrameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeFrames, null, options, request);
      }
      /// <summary>
      /// Request a set of frames specified in the request 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Narupa.Protocol.Instance.GetFrameResponse> GetFrames(global::Narupa.Protocol.Instance.GetFrameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFrames(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request a set of frames specified in the request 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Narupa.Protocol.Instance.GetFrameResponse> GetFrames(global::Narupa.Protocol.Instance.GetFrameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetFrames, null, options, request);
      }
      /// <summary>
      /// Request a specific frame. This may be used to provider a 'molecule-on-demand' service 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Narupa.Protocol.Instance.GetFrameResponse GetFrame(global::Narupa.Protocol.Instance.GetFrameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFrame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request a specific frame. This may be used to provider a 'molecule-on-demand' service 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Narupa.Protocol.Instance.GetFrameResponse GetFrame(global::Narupa.Protocol.Instance.GetFrameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFrame, null, options, request);
      }
      /// <summary>
      /// Request a specific frame. This may be used to provider a 'molecule-on-demand' service 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Narupa.Protocol.Instance.GetFrameResponse> GetFrameAsync(global::Narupa.Protocol.Instance.GetFrameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFrameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request a specific frame. This may be used to provider a 'molecule-on-demand' service 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Narupa.Protocol.Instance.GetFrameResponse> GetFrameAsync(global::Narupa.Protocol.Instance.GetFrameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFrame, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TrajectoryServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TrajectoryServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TrajectoryServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SubscribeFrames, serviceImpl.SubscribeFrames)
          .AddMethod(__Method_GetFrames, serviceImpl.GetFrames)
          .AddMethod(__Method_GetFrame, serviceImpl.GetFrame).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TrajectoryServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SubscribeFrames, serviceImpl.SubscribeFrames);
      serviceBinder.AddMethod(__Method_GetFrames, serviceImpl.GetFrames);
      serviceBinder.AddMethod(__Method_GetFrame, serviceImpl.GetFrame);
    }

  }
}
#endregion
