// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: narupa/protocol/imd/imd.proto
// </auto-generated>
// Original file comments:
// Copyright (c) Alex Jamieson-Binnie. All rights reserved.
// Licensed under the GPL. See License.txt in the project root for license information.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Narupa.Protocol.Imd {
  public static partial class InteractiveMolecularDynamics
  {
    static readonly string __ServiceName = "narupa.protocol.imd.InteractiveMolecularDynamics";

    static readonly grpc::Marshaller<global::Narupa.Protocol.Imd.Interaction> __Marshaller_narupa_protocol_imd_Interaction = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.Imd.Interaction.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Protocol.Imd.InteractionReply> __Marshaller_narupa_protocol_imd_InteractionReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.Imd.InteractionReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Narupa.Protocol.Imd.Interaction, global::Narupa.Protocol.Imd.InteractionReply> __Method_PublishInteractions = new grpc::Method<global::Narupa.Protocol.Imd.Interaction, global::Narupa.Protocol.Imd.InteractionReply>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "PublishInteractions",
        __Marshaller_narupa_protocol_imd_Interaction,
        __Marshaller_narupa_protocol_imd_InteractionReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Narupa.Protocol.Imd.ImdReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of InteractiveMolecularDynamics</summary>
    public abstract partial class InteractiveMolecularDynamicsBase
    {
      /// <summary>
      /// Publish interactions.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Narupa.Protocol.Imd.InteractionReply> PublishInteractions(grpc::IAsyncStreamReader<global::Narupa.Protocol.Imd.Interaction> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for InteractiveMolecularDynamics</summary>
    public partial class InteractiveMolecularDynamicsClient : grpc::ClientBase<InteractiveMolecularDynamicsClient>
    {
      /// <summary>Creates a new client for InteractiveMolecularDynamics</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public InteractiveMolecularDynamicsClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for InteractiveMolecularDynamics that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public InteractiveMolecularDynamicsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected InteractiveMolecularDynamicsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected InteractiveMolecularDynamicsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Publish interactions.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Narupa.Protocol.Imd.Interaction, global::Narupa.Protocol.Imd.InteractionReply> PublishInteractions(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PublishInteractions(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Publish interactions.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Narupa.Protocol.Imd.Interaction, global::Narupa.Protocol.Imd.InteractionReply> PublishInteractions(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_PublishInteractions, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override InteractiveMolecularDynamicsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InteractiveMolecularDynamicsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(InteractiveMolecularDynamicsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_PublishInteractions, serviceImpl.PublishInteractions).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, InteractiveMolecularDynamicsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_PublishInteractions, serviceImpl.PublishInteractions);
    }

  }
}
#endregion
