// Copyright (c) Intangible Realities Lab, University Of Bristol. All rights reserved.
// Licensed under the GPL. See License.txt in the project root for license information.

syntax = "proto3";
import "google/protobuf/struct.proto";

package narupa.protocol.multiplayer;

service Multiplayer {
    // Streams updates of player avatars.
    rpc SubscribePlayerAvatars(SubscribePlayerAvatarsRequest) returns (stream Avatar) {}

    // Streams initial value and then changes of all resources.
    rpc SubscribeAllResourceValues(SubscribeAllResourceValuesRequest) returns (stream ResourceValuesUpdate) {}

    // Create a new player for this multiplayer session.
    rpc CreatePlayer(CreatePlayerRequest) returns (CreatePlayerResponse) {}

    // Call to provide a stream of player avatar updates.
    rpc UpdatePlayerAvatar(stream Avatar) returns (StreamEndedResponse) {}

    // Acquire a lock for a player on a specified resource.
    rpc AcquireResourceLock(AcquireLockRequest) returns (ResourceRequestResponse) {}

    // Release a player's lock on a specified resource.
    rpc ReleaseResourceLock(ReleaseLockRequest) returns (ResourceRequestResponse) {}

    // Set a resource's value.
    rpc SetResourceValue(SetResourceValueRequest) returns (ResourceRequestResponse) {}

    // Remove a resource.
    rpc RemoveResourceKey(RemoveResourceKeyRequest) returns (ResourceRequestResponse) {}
}

message StreamEndedResponse {
}

// A named object oriented in 3D space.
message AvatarComponent {
    // Identifier for the component type.
    string name = 1;
    // Position vector as x, y, z components.
    repeated float position = 2;
    // Rotation quaternion as x, y, z, w components.
    repeated float rotation = 3;
}

// A collection of avatar components belonging to a particular player.
message Avatar {
    // ID of the player owning the avatar.
    string player_id = 1;
    // Set of named components comprising the avatar.
    repeated AvatarComponent components = 2;
}

message SubscribePlayerAvatarsRequest {
    // Interval (in Seconds) between update sends.
    float update_interval = 1;
    // ID of player to ignore (usually either your own ID or omitted).
    string ignore_player_id = 2;
}

message CreatePlayerRequest {
    // Friendly name for the new player.
    string player_name = 1;
}

message CreatePlayerResponse {
    // The ID assigned to the newly created player.
    string player_id = 1;
}

message AcquireLockRequest {
    // ID of player making request.
    string player_id = 1;
    // Identifier of resource to be locked.
    string resource_id = 2;
    // Duration in seconds to keep the lock. (default indefinite lock)
    float timeout_duration = 3;
}

message ReleaseLockRequest {
    // ID of player making request.
    string player_id = 1;
    // Identifier of resource to be locked.
    string resource_id = 2;
}

message SetResourceValueRequest {
    // ID of player making request
    string player_id = 1;
    // Identifier of resource to be set.
    string resource_id = 2;
    // Value to set the resource to.
    google.protobuf.Value resource_value = 3;
}

message RemoveResourceKeyRequest {
    // ID of player making request
    string player_id = 1;
    // Identifier of resource to be removed.
    string resource_id = 2;
}

message ResourceRequestResponse {
    // Whether the request was successful.
    bool success = 1;
}

message SubscribeAllResourceValuesRequest {
    // Interval (in seconds) between update sends.
    float update_interval = 1;
}

message ResourceValuesUpdate {
    // Map of resource address to updated resource value.
    map<string, google.protobuf.Value> resource_value_changes = 1;
    // Set of keys that have been removed since last update.
    repeated string resource_value_removals = 2;
}
