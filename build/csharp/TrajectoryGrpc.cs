// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: trajectory.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Narupa.Protocol {
  public static partial class InstanceService
  {
    static readonly string __ServiceName = "InstanceService";

    static readonly grpc::Marshaller<global::Narupa.Protocol.LoadTrajectoryRequest> __Marshaller_LoadTrajectoryRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.LoadTrajectoryRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Protocol.LoadTrajectoryResponse> __Marshaller_LoadTrajectoryResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.LoadTrajectoryResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Protocol.SetTrajectoryRequest> __Marshaller_SetTrajectoryRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.SetTrajectoryRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Protocol.SetTrajectoryResponse> __Marshaller_SetTrajectoryResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.SetTrajectoryResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Protocol.GetInstanceAtomCountRequest> __Marshaller_GetInstanceAtomCountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.GetInstanceAtomCountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Narupa.Protocol.GetInstanceAtomCountResponse> __Marshaller_GetInstanceAtomCountResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Narupa.Protocol.GetInstanceAtomCountResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Narupa.Protocol.LoadTrajectoryRequest, global::Narupa.Protocol.LoadTrajectoryResponse> __Method_LoadTrajectory = new grpc::Method<global::Narupa.Protocol.LoadTrajectoryRequest, global::Narupa.Protocol.LoadTrajectoryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LoadTrajectory",
        __Marshaller_LoadTrajectoryRequest,
        __Marshaller_LoadTrajectoryResponse);

    static readonly grpc::Method<global::Narupa.Protocol.SetTrajectoryRequest, global::Narupa.Protocol.SetTrajectoryResponse> __Method_SetTrajectory = new grpc::Method<global::Narupa.Protocol.SetTrajectoryRequest, global::Narupa.Protocol.SetTrajectoryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTrajectory",
        __Marshaller_SetTrajectoryRequest,
        __Marshaller_SetTrajectoryResponse);

    static readonly grpc::Method<global::Narupa.Protocol.GetInstanceAtomCountRequest, global::Narupa.Protocol.GetInstanceAtomCountResponse> __Method_GetInstanceAtomCount = new grpc::Method<global::Narupa.Protocol.GetInstanceAtomCountRequest, global::Narupa.Protocol.GetInstanceAtomCountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInstanceAtomCount",
        __Marshaller_GetInstanceAtomCountRequest,
        __Marshaller_GetInstanceAtomCountResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Narupa.Protocol.TrajectoryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of InstanceService</summary>
    public abstract partial class InstanceServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Narupa.Protocol.LoadTrajectoryResponse> LoadTrajectory(global::Narupa.Protocol.LoadTrajectoryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Narupa.Protocol.SetTrajectoryResponse> SetTrajectory(global::Narupa.Protocol.SetTrajectoryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Narupa.Protocol.GetInstanceAtomCountResponse> GetInstanceAtomCount(global::Narupa.Protocol.GetInstanceAtomCountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for InstanceService</summary>
    public partial class InstanceServiceClient : grpc::ClientBase<InstanceServiceClient>
    {
      /// <summary>Creates a new client for InstanceService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public InstanceServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for InstanceService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public InstanceServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected InstanceServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected InstanceServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Narupa.Protocol.LoadTrajectoryResponse LoadTrajectory(global::Narupa.Protocol.LoadTrajectoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoadTrajectory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Narupa.Protocol.LoadTrajectoryResponse LoadTrajectory(global::Narupa.Protocol.LoadTrajectoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LoadTrajectory, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Narupa.Protocol.LoadTrajectoryResponse> LoadTrajectoryAsync(global::Narupa.Protocol.LoadTrajectoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoadTrajectoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Narupa.Protocol.LoadTrajectoryResponse> LoadTrajectoryAsync(global::Narupa.Protocol.LoadTrajectoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LoadTrajectory, null, options, request);
      }
      public virtual global::Narupa.Protocol.SetTrajectoryResponse SetTrajectory(global::Narupa.Protocol.SetTrajectoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTrajectory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Narupa.Protocol.SetTrajectoryResponse SetTrajectory(global::Narupa.Protocol.SetTrajectoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTrajectory, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Narupa.Protocol.SetTrajectoryResponse> SetTrajectoryAsync(global::Narupa.Protocol.SetTrajectoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTrajectoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Narupa.Protocol.SetTrajectoryResponse> SetTrajectoryAsync(global::Narupa.Protocol.SetTrajectoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTrajectory, null, options, request);
      }
      public virtual global::Narupa.Protocol.GetInstanceAtomCountResponse GetInstanceAtomCount(global::Narupa.Protocol.GetInstanceAtomCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInstanceAtomCount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Narupa.Protocol.GetInstanceAtomCountResponse GetInstanceAtomCount(global::Narupa.Protocol.GetInstanceAtomCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInstanceAtomCount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Narupa.Protocol.GetInstanceAtomCountResponse> GetInstanceAtomCountAsync(global::Narupa.Protocol.GetInstanceAtomCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInstanceAtomCountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Narupa.Protocol.GetInstanceAtomCountResponse> GetInstanceAtomCountAsync(global::Narupa.Protocol.GetInstanceAtomCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInstanceAtomCount, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override InstanceServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InstanceServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(InstanceServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_LoadTrajectory, serviceImpl.LoadTrajectory)
          .AddMethod(__Method_SetTrajectory, serviceImpl.SetTrajectory)
          .AddMethod(__Method_GetInstanceAtomCount, serviceImpl.GetInstanceAtomCount).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, InstanceServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_LoadTrajectory, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Narupa.Protocol.LoadTrajectoryRequest, global::Narupa.Protocol.LoadTrajectoryResponse>(serviceImpl.LoadTrajectory));
      serviceBinder.AddMethod(__Method_SetTrajectory, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Narupa.Protocol.SetTrajectoryRequest, global::Narupa.Protocol.SetTrajectoryResponse>(serviceImpl.SetTrajectory));
      serviceBinder.AddMethod(__Method_GetInstanceAtomCount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Narupa.Protocol.GetInstanceAtomCountRequest, global::Narupa.Protocol.GetInstanceAtomCountResponse>(serviceImpl.GetInstanceAtomCount));
    }

  }
}
#endregion
